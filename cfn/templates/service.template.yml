{%- set DEBUG=debug | default(false) %}
{%- set template_path="v1/cfn/shared/apps/ecs-v2/service.template.yml" %}

{%- from 'v1/cfn/shared/globals/globals.macros' import dump_debug_object with context -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import allow_destroy -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import update_element -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import set_default -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import rtrim_element -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import rtrim -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import list_plus -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import as_bool -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import digits -%}
{%- from 'v1/cfn/shared/globals/globals.macros' import add_to_list -%}

{%- set default_description =
  'This template deploys a pair of example ECS services from containers published in Amazon EC2 Container Registry (Amazon ECR).'
%}

{#-   These variables cannot be inherited from the config, they are confined to the template as representing internal state
#}

{%- set global = {} %}
{%- set routers = [] %}
{%- set registries = [] %}

{#-   Build globals to DRY template. Some values build on predecesors, ordering matters
      Since global is initialized to an empty dictionary, defaults are handled in the legacy | default() way
#}

{{- update_element(global, "cluster_name", cluster_name | default("unknown")) }}
{{- update_element(global, "v1_cluster", v1_cluster | default(False)) }}
{{- update_element(global, "name", name | default("unknown")) }}
{{- update_element(global, "env", env | default("dev")) }}{# DEPRECATED, use environment #}
{{- update_element(global, "environment", environment | default(global.env)) }}
{{- update_element(global, "vpc_environment", vpc_environment | default(global.environment)) }}

{{- update_element(global, "router_blank_alias", False) }}
{{- update_element(global, "uses_load_balancer", False) }}
{{- update_element(global, "uses_service_registry", False) }}
{{- update_element(global, "uses_cluster_service_discovery", False) }}
{{- update_element(global, "vpc_import", '!ImportValue "vpc-' + global.vpc_environment + '-VpcId"') }}
{{- update_element(global, "label", global.name + '-' + global.environment) }}
{{- update_element(global, "default_fluentd_address", "172.17.0.1:24224") }}
{{- update_element(global, "enable_ssm_export", enable_ssm_export | default(false)) }}
{{- update_element(global, "short_label", global.label[:32]) }}
{{- update_element(global, "label_hash", (global.label | v1_sha1)[:8]) }}



{{- update_element(global, "cfn_metadata", cfn_metadata | default({})) }}
{{- update_element(global, "cfn_parameters", cfn_parameters | default({})) }}
{{- update_element(global, "cfn_conditions", cfn_conditions | default({})) }}
{{- update_element(global, "cfn_rules", cfn_rules | default({})) }}
{{- update_element(global, "cfn_mappings", cfn_mappings | default({})) }}
{{- update_element(global, "cfn_resources", cfn_resources | default({})) }}
{{- update_element(global, "cfn_outputs", cfn_outputs | default({})) }}
{{- update_element(global, "cfn_transform", cfn_transform | default(false)) }}

{#- Insert our own name into the Stackjack.CanonicalTemplate metadata #}
{{- set_default(global.cfn_metadata, "Stackjack", {}) }}
{{- update_element(global.cfn_metadata["Stackjack"], "CanonicalTemplate", template_path) }}

{{- dump_debug_object("Generated Global object", global) }}


{#-   Place Warning notices in output as necessary
#}

{% if env is defined %}
## WARNING: The use of "context.env" is deprecated in the config file. Please use "context.environment"
{% endif %}
{% if env is defined and environment is defined and env != environment %}
## Warning: Both "context.env" and "context.environment" are defined, ignoring "context.env"
{% endif %}

{#-   Take the passed objects service, routing, container and apply defaults.
      The goal here is to DRY the template, and confine the bulk of decision/defaults to the header of the template
#}

{{- dump_debug_object("Supplied Service object", service) }}

{{- set_default(service, "network_mode", "bridge") }}
{{- set_default(service, "strategy", "REPLICA") }}
{{- set_default(service, "task_role", {}) }}
{{- set_default(service, "default_execution_role_policy", {
      'effect': 'Allow',
      'actions' : ["ssm:GetParameters", "secretsmanager:GetSecretValue"],
      'resources' : [
        "!Sub" +  " arn:aws:ssm:*:${AWS::AccountId}:parameter/*",
        "!Sub" +  " arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*",
      ],
})}}
{{- set_default(service, "task_family", global.label) }}
{{- set_default(service, "log_group_name", "/".join(["/service", global.name, global.environment])) }}
{{- set_default(service, "log_stream_prefix", global.environment) }}
{{- set_default(service, "create_log_group", True) }}
{{- set_default(service, "log_retention", 90) }}
{{- set_default(service, "default_scale", 3) }}

{#- Assume we are not responsible for task_role #}
{{- update_element(service, "create_task_role", false) }}
{#- Assume we ARE responsible for execution_role #}
{{- update_element(service, "create_execution_role", true) }}

{#-   Handling of service name:
        Set dynamic_service_name default based on existance of service_name element
        if dynamic_service_name is False (user defined) then set default service_name if not defined
#}

{{- set_default(service, "dynamic_service_name", not(service.service_name is defined)) }}

{%- if not service.dynamic_service_name %}
  {{- set_default(service, "service_name", global.label) }}
{%- endif %}

{%- macro validate_role_policies(policies) %}

  {#- Validate .policies #}
  {%- for policy in policies %}
    {{- update_element(policy, "effect",  policy.effect | default('allow') | capitalize) }}

    {#- If Neither resource or not_resources is defined then default is resources: * #}

    {%- if policy.resources is not defined and policy.not_resources is not defined %}
      {{- update_element(policy, 'resources', ['*']) }}
    {%- endif %}

    {#- Transform objects to proper class #}

    {%- if policy.actions is string %}
      {{- update_element(policy, 'actions', [ policy.actions ]) }}
    {%- elif policy.actions is mapping %}
      {{- update_element(policy, 'actions', policy.actions.values()) }}
    {%- endif %}

    {%- if policy.not_actions is string %}
      {{- update_element(policy, 'not_actions', [ policy.not_actions ]) }}
    {%- elif policy.not_actions is mapping %}
      {{- update_element(policy, 'not_actions', policy.not_actions.values()) }}
    {%- endif %}

    {%- if policy.resources is string %}
      {{- update_element(policy, 'resources', [ policy.resources ]) }}
    {%- elif policy.resources is mapping %}
      {{- update_element(policy, 'resources', policy.resources.values()) }}
    {%- endif %}

    {%- if policy.not_resources is string %}
      {{- update_element(policy, 'not_resources', [ policy.not_resources ]) }}
    {%- elif policy.not_resources is mapping %}
      {{- update_element(policy, 'not_resources', policy.not_resources.values()) }}
    {%- endif %}

    {#- Validate or disable #}
    {%- if policy.actions         is not sequence %}{{- update_element(policy, 'actions',        false) }}{%- endif %}
    {%- if policy.not_actions     is not sequence %}{{- update_element(policy, 'not_actions',    false) }}{%- endif %}
    {%- if policy.resources       is not sequence %}{{- update_element(policy, 'resources',      false) }}{%- endif %}
    {%- if policy.not_resources   is not sequence %}{{- update_element(policy, 'not_resources',  false) }}{%- endif %}
    {%- if policy.principals      is not mapping  %}{{- update_element(policy, 'principals',     false) }}{%- endif %}
    {%- if policy.not_principals  is not mapping  %}{{- update_element(policy, 'not_principals', false) }}{%- endif %}
    {%- if policy.conditions      is not mapping  %}{{- update_element(policy, 'conditions',     false) }}{%- endif %}

  {%- endfor %}
{%- endmacro %}

{#-   If service.task_role.import_role is defined, then decide if ARN or an ImportValue
#}

{%- if service.task_role.import_role is defined %}
  {{- update_element(service, "create_task_role", false) }}

  {%- if service.task_role.import_role[:3] != "arn" %}
    {{- update_element(service, "task_role_arn", "!ImportValue " + service.task_role.import_role) }}

  {%- else %}
    {{- update_element(service, "task_role_arn", service.task_role.import_role) }}

  {%- endif %}

{#-   Else if a policy is specified then set flags to create the resource and reference it within
#}

{%- elif service.task_role.policies is defined %}
  {{- update_element(service, "task_role_arn", "!Ref TaskRole") }}
  {{- update_element(service, "create_task_role", true) }}
  {{- set_default(service, "task_policy_name_prefix", 'svc-task-role-' + global.label) }}
  {{- set_default(service, "task_policy_name", service.task_policy_name_prefix[:60] + '-' + global.label_hash) }}
  {{- validate_role_policies(service.task_role.policies) }}
{%- endif %}

{{- dump_debug_object("Generated Service object", service) }}


{#- If an execution_role is not defined, we create a default one with SSM and SecretsManager Permissions
 #  If one is one is defined, and policies are specified, we append the default_execution_role_policy to ensure
 #  secrets can be injected
#}
{%- if service.execution_role is undefined %}
    {{- update_element(service, "execution_role", {"policies" : []}) }}
    {{- add_to_list(service.execution_role.policies, service.default_execution_role_policy) }}
{% endif %}
{%- if service.execution_role.import_role is defined %}
  {{- update_element(service, "create_execution_role", false) }}

  {%- if service.execution_role.import_role[:3] != "arn" %}
    {{- update_element(service, "execution_role_arn", "!ImportValue " + service.execution_role.import_role) }}

  {%- else %}
    {{- update_element(service, "execution_role_arn", service.execution_role.import_role) }}

  {%- endif %}

{#-   Else if a policy is specified then set flags to create the resource and reference it within
#}

{%- else %}
  {{- update_element(service, "execution_role_arn", "!Ref ExecutionRole") }}
  {{- update_element(service, "create_execution_role", true) }}
  {{- set_default(service, "execution_policy_name_prefix", 'svc-exec-role-' + global.label) }}
  {{- set_default(service, "execution_policy_name", service.execution_policy_name_prefix[:60] + '-' + global.label_hash) }}
  {%- if service.execution_role.policies is defined %}
    {{- add_to_list(service.execution_role.policies,service.default_execution_role_policy) }}
  {%- else %}
  {%- endif %}
  {{- validate_role_policies(service.execution_role.policies) }}
{%- endif %}

{# Default Scale Logic #}
{{- update_element(global, "scaling", scaling | default({})) }}
{{- dump_debug_object("Supplied Scaling object", global.scaling) }}

{# Only disable the default scaling policies if you are replacing with you own #}
{{- set_default(global.scaling, "disable", false) }}

{%- if service.strategy != "REPLICA" %}
  {{- update_element(global.scaling, "disable", true) }}
{%- endif %}

{{- set_default(global.scaling, "max", service.default_scale * 12) }}
{{- set_default(global.scaling, "min", service.default_scale) }}

{{- set_default(global.scaling, "enable_scaling_cpu", true) }}
{{- set_default(global.scaling, "enable_scaling_mem", true) }}

{{- set_default(global.scaling, "cpu_target", 50) }}
{{- set_default(global.scaling, "mem_target", 75) }}

{{- set_default(global.scaling, "scale_in_cooldown", 900) }}
{{- set_default(global.scaling, "scale_out_cooldown", 30) }}

{{- set_default(global.scaling, "disable_scale_in", false) }}

{{- dump_debug_object("Generated Scaling object", global.scaling) }}



{#-   Test if routing is a dictionary and if so, wrap in a list
      Also set alias to "" (empty)
      Designed for legacy support, before routing was changed from map to list of maps
-#}

{#- If routing is old style dict and not list of dict, then transform
-#}

{%- if routing is mapping and routing is not string %}
  {{- set_default(routing, "alias", "") }}
  {%- set routing = [ routing ] %}
{%- endif %}

{#-   For each routing entry specified, evaluate and build executable object
-#}

{%- for router in routing | default([]) %}
  {{- dump_debug_object("Source routing object", router) }}

  {%- if router is not mapping %}{#- Router is not mapping #}
    {% set error="While iterating routing array encountered non dictionary object" / 0 %}
  {%- else %}
    {{- update_element(router, "create_load_balancer", False) }}
    {{- update_element(router, "create_target_group", False) }}
    {{- update_element(router, "uses_load_balancer", False) }}

    {{- set_default(router, "destroy", False) }}
    {{- set_default(router, "allow_destroy", False) }}
    {{- set_default(router, "is_private", True) }}
    {{- set_default(router, "is_public", False) }}
    {{- set_default(router, "perform_health_check", True) }}
    {{- set_default(router, "health_check", {}) }}
    {{- set_default(router, "scheme", None) }}
    {{- set_default(router, "subnets", None) }}
    {{- set_default(router, "subnet_group", "group0") }}
    {{- set_default(router, "http_to_https_redirect", False) }}
    {{- set_default(router, "priority", 1) }}
    {{- set_default(router, "target_group_attributes", []) }}
    {{- set_default(router, "dynamic_name", not(router.target_group_name is defined)) }}
    {{- set_default(router, "alias", loop.index if loop.index > 1 else "") }}
    {{- set_default(router, "protocol", "HTTP") }}
    {{- set_default(router, "container_name", container.name) }}
    {{- set_default(router, "container_port", container.port) }}
    {{- set_default(router, "container_protocol", container.protocol | default(router.protocol)) }}

    {# First make sure that each router object has a scaling stanza #}
    {{- set_default(router, "scaling", dict()) }}

    {# Then use the global scaling object as defaults for each of the router scaling objects #}
    {{- set_default(router.scaling, "disable", true) }}

    {% if global.scaling.disable %}
      {{- update_element(router.scaling, "disable", global.scaling.disable) }}
    {% endif %}
    {{- set_default(router.scaling, "scale_in_cooldown", global.scaling.scale_in_cooldown) }}
    {{- set_default(router.scaling, "scale_out_cooldown", global.scaling.scale_out_cooldown) }}
    {{- set_default(router.scaling, "disable_scale_in", global.scaling.disable_scale_in) }}

    {% if router.scaling.latency_target is defined %}
      {{- set_default(router.scaling, "statistic", "Average") }}
      {{- update_element(router.scaling, "disable", false) }}
    {% endif %}

    {{- set_default(router, "no_load_balancer", False) }}
    {{- update_element(router, "needs_load_balancer", not(router.no_load_balancer)) }}

    {%- if router.destroy %}
      {{- dump_debug_object("Destroying routing object", router) }}

      {#- Append a record to cause destroy entries to be created #}
      {% set x=routers.append({
        "alias": router.alias | v1_alphanumerize,
        "destroy": true,
        "create_load_balancer": false,
        "create_target_group": false,
        "uses_load_balancer": false,
        "scaling": {"disable": true},
      }) %}

    {%- else %}
      {{- set_default(router, "public_protocol", router.protocol) }}

      {#- Decide about HTTPS #}
      {%- if router.public_protocol|upper == "HTTP" and router.certificate is defined %}
        {{- set_default(router, "public_port", 443) }}
        {{- update_element(router, "public_protocol", "HTTPS") }}

      {%- else %}
        {#- Waited to set public_port default until after decision about certificate intentionally #}
        {{- set_default(router, "public_port", 80) }}

      {%- endif %}

      {#- Make sure port numbers are integers #}
      {{- update_element(router, "public_port", router.public_port | int) }}
      {{- update_element(router, "container_port", router.container_port | int) }}

      {#- Based on how above decisions were made, decide on ALB/NLB #}
      {{- update_element(router, "xlb_type", "application" if router.public_protocol|upper in ['HTTP','HTTPS'] else "network") }}

      {%- if router.xlb_type == "application" and router.perform_health_check %}
        {{- update_element(router.health_check, "path",
            router.health_check.path | default(service.health_check_path) | default("/")) }}
        {{- update_element(router.health_check, "matcher",
            router.health_check.matcher | default(service.health_check_matcher) | default({"HttpCode": "200-299"})) }}
        {{- update_element(router.health_check, "interval_seconds",
            router.health_check.interval_seconds | default(service.health_check_interval_seconds) | default(10)) }}
        {{- update_element(router.health_check, "healthy_threshold_count",
            router.health_check.healthy_threshold_count | default(service.healthy_threshold_count) | default(2)) }}
        {{- update_element(router.health_check, "unhealthy_threshold_count",
            router.health_check.unhealthy_threshold_count | default(service.unhealthy_threshold_count) | default(6)) }}
        {{- update_element(router.health_check, "timeout_seconds",
            router.health_check.timeout_seconds | default(service.health_check_timeout_seconds) | default(5)) }}
        {{- update_element(router.health_check, "protocol",
            router.health_check.protocol | default(service.protocol) | default("HTTP")) }}
        {{- update_element(router.health_check, "port",
            router.health_check.port | default(service.port) | default(80)) }}
      {%- endif %}

      {#- Trim trailing . from dns entries to simplify usage #}
      {%- if router.dns is defined %}
        {{- rtrim_element(router.dns, "domain", '.') }}
        {{- rtrim_element(router.dns, "zone_apex", '.') }}
      {%- endif -%}

      {#- Set Flag if we have an entry with a blank alias #}
      {{- update_element(global, "router_blank_alias", ( router.alias == "")) }}

      {#- since alias is used for Resource Names, capitalize it #}
      {{- update_element(router, "alias", router.alias | v1_alphanumerize) }}

      {#- If we are not using dynamic naming for the route, then name it #}
      {%- if not router.dynamic_name %}
        {{- set_default(router, "target_group_name", "!Sub ${AWS::StackName}-default") }}
      {%- endif %}

      {#- Based on the style (locally defined, imported listener, imported target group) defined the required vars to assist in templating #}
      {%- if router.import_target_group is defined %}
        {{- update_element(router, "router_type", "External_Target_Group") }}
        {{- update_element(router, "create_load_balancer", False) }}
        {{- update_element(router, "create_target_group", False) }}
        {{- update_element(router, "uses_load_balancer", True) }}
        {{- update_element(router, "target_group_arn", "!ImportValue " + router.import_target_group) }}
        {{- update_element(router, "target_dns_zoneid", ("!ImportValue " + router.dns.load_balancer_zone_id) if (router.dns is defined) else None) }}
        {{- update_element(router, "target_dns_alias", ("!ImportValue " + router.dns.load_balancer_dns) if (router.dns is defined) else None) }}

      {%- elif router.import_listener is defined %}
        {{- update_element(router, "router_type", "External_Listener") }}
        {{- update_element(router, "create_load_balancer", False) }}
        {{- update_element(router, "create_target_group", True) }}
        {{- update_element(router, "uses_load_balancer", True) }}
        {{- update_element(router, "depends_on", "TargetGroup" + router.alias) }}
        {{- update_element(router, "target_group_arn", "!Ref TargetGroup" + router.alias) }}
        {{- update_element(router, "target_dns_zoneid", ("!ImportValue " + router.dns.load_balancer_zone_id) if (router.dns is defined) else None) }}
        {{- update_element(router, "target_dns_alias", ("!ImportValue " + router.dns.load_balancer_dns) if (router.dns is defined) else None) }}

      {%- elif router.needs_load_balancer %}
        {{- update_element(router, "router_type", "Locally_Generated") }}
        {{- update_element(router, "create_load_balancer", True) }}
        {{- update_element(router, "create_target_group", False) }}
        {{- update_element(router, "uses_load_balancer", True) }}
        {{- update_element(router, "depends_on", "LoadBalancerListener" + router.alias) }}
        {{- update_element(router, "target_group_arn", "!Ref DefaultTargetGroup" + router.alias) }}
        {{- update_element(router, "target_dns_zoneid", "!GetAtt LoadBalancer" + router.alias + ".CanonicalHostedZoneID") }}
        {{- update_element(router, "target_dns_alias", "!GetAtt LoadBalancer" + router.alias + ".DNSName") }}

      {%- else %}
        {{- update_element(router, "router_type", "Unknown") }}

      {%- endif %}

      {%- if router.uses_load_balancer %}
        {#- Update global.uses_load_balancer since we discovered an entry that requires one #}
        {{- update_element(global, "uses_load_balancer", True) }}
      {%- endif %}

      {#- Having is_public/is_private allows for indeterminate states, so if we are conflicted, it becomes private -#}
      {%- if router.is_public and not(router.is_private) %}
        {{- update_element(router, "scheme", "internet-facing") }}
        {{- update_element(router, "cidr_mask", "0.0.0.0/0") }}
        {{- update_element(router, "subnets", '!ImportValue "vpc-' + global.vpc_environment + '-PublicSubnetIds-' + router.subnet_group|capitalize + '-v2"') }}

      {%- else %}
        {{- update_element(router, "scheme", "internal") }}
        {{- update_element(router, "cidr_mask", "10.0.0.0/8") }}
        {{- update_element(router, "subnets", '!ImportValue "vpc-' + global.vpc_environment + '-PrivateSubnetIds-' + router.subnet_group|capitalize + '-v2"') }}

      {%- endif %}

      {{- dump_debug_object("Generated routing object", router) }}

      {#- Add the newly updated router object to the list of routers #}
      {%- set x=routers.append(router) %}

    {%- endif %}{#- Not router.destroy #}

  {%- endif %}
{%- endfor %}

{%- if not(global.router_blank_alias) %}
  {#- Append a record to cause destroy entries to be created #}
  {% set x=routers.append({
      "alias": "",
      "destroy": true,
      "create_load_balancer": false,
      "create_target_group": false,
      "uses_load_balancer": false,
      "scaling": {"disable": true},
  }) %}
{%- endif %}

{%- for registry in discovery | default([]) %}
    {{- dump_debug_object("Supplied discovery object", registry) }}

    {{- set_default(registry, "enabled", True) }}
    {{- set_default(registry, "destroy", False) }}
    {{- set_default(registry, "enable_cluster_service_discovery", False) }}
    {{- set_default(registry, "enable_registration", True) }}
    {{- set_default(registry, "service_discovery_ns", False) }}
    {{- set_default(registry, "service_name", False) }}
    {{- set_default(registry, "routing_policy", "MULTIVALUE") }}
    {{- set_default(registry, "ttl", 60) }}

    {{- set_default(registry, "alias", loop.index if loop.index > 1 else "") }}
    {{- update_element(registry, "alias", registry.alias | v1_alphanumerize) }}
    {{- update_element(registry, "routing_policy", registry.routing_policy | upper) }}

    {%- if service.network_mode == 'host' %}
        {{- set_default(registry, "types", ["A"]) }}
    {%- else %}
        {{- set_default(registry, "types", ["A", "SRV"]) }}
    {%- endif %}

    {%- if registry.types is string %}
        {{- update_element(registry, "types", [ registry.types ]) }}
    {%- endif %}

    {#-
        If registry entry uses cluster_service_discovery, set values accordingly
    #}

    {%- if registry.enable_cluster_service_discovery %}
        {{- update_element(registry, "service_discovery_ns", "!Ref ClusterServiceDiscoveryNS") }}
        {{- update_element(global, "uses_cluster_service_discovery", True) }}
    {%- endif %}

    {#-
        Disable registry entry if not configured properly
    #}

    {%- if registry.destroy %}
        {{- update_element(registry, "enabled", False) }}
    {%- endif %}

    {%- if not registry.service_name %}
        {{- update_element(registry, "enabled", False) }}
    {%- endif %}

    {%- if not registry.service_discovery_ns %}
        {{- update_element(registry, "enabled", False) }}
    {%- endif %}

    {#-
        If Registry is still enabled, then set global flags, otherwise disable registration
    #}

    {%- if not registry.enabled %}
        {{- update_element(registry, "enable_registration", False) }}
    {% endif %}

    {%- if registry.enable_registration %}
        {{- set_default(registry, "container_name", container.name) }}
        {{- set_default(registry, "container_port", container.port) }}
        {{- update_element(registry, "container_port", registry.container_port | int) }}
        {{- update_element(global, "uses_service_registry", True) }}
    {%- endif %}

    {{- dump_debug_object("Generated discovery object", registry) }}
    {%- set x=registries.append(registry) %}
{%- endfor %}

{#-
    Define Macros for updating and generating container configs
-#}

{%- macro update_container_config(container, default_image) %}
  {{- dump_debug_object("Supplied Container object", container) }}

  {{- set_default(container, "essential", true) }}
  {{- set_default(container, "no_ports", False) }}
  {{- set_default(container, "needs_ports", not( container.no_ports )) }}
  {{- set_default(container, "port_mapping", {}) }}
  {{- set_default(container, "logs", "awslogs") }}
  {{- set_default(container, "protocol", "tcp") }}
  {{- update_element(container, "port", container.port | default(8080) | int) }}

  {#- Set memory_reservation default, and strip non-digits from value and insure is an integer, Min is 4 #}
  {{- set_default(container, "memory_reservation", 512) }}
  {{- update_element(container, "memory_reservation", [ digits(container.memory_reservation)|int, 4] | max) }}


  {#- Decide if image is based on external repo, or transform to our ECR based naming #}

  {%- if container.raw_image_path is not defined %}
    {{- set_default(container, "image", default_image) }}

    {%- if '/' in container.image or ':' in container.image %}
      {{- update_element(container, "raw_image_path", container.image) }}

    {% else %}
      {{- set_default(container, "image_version", "/deployments/" + container.image + "/latest") }}
      {{- update_element(container, "raw_image_path",  "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/"
                                                    + container.image
                                                    + ":${ImageVersion"
                                                    + container.name|v1_alphanumerize
                                                    + "}"
      ) }}

    {% endif %}
  {% endif %}


  {#- If we need_ports and nothing in port_mapping, add legacy port/protocol to port_mapping -#}
  {%- if container.needs_ports and container.port_mapping | length == 0 %}
    {{- update_element(container, 'port_mapping', { container.port: container.protocol }) }}
  {%- endif %}
    
  {%- if container.log_stream_prefix is not defined %}
     {{- update_element(container, "log_stream_prefix", service.log_stream_prefix) }}
  {%- endif %}

  {{- dump_debug_object("Generated Container object", container) }}
{%- endmacro %}

{%- macro generate_container_config(container, service) %}
- Name: {{ container.name }}
  Essential: {{ container.essential }}
  MemoryReservation: {{ container.memory_reservation }}
  Image: !Sub "{{ container.raw_image_path }}"

{%- if container.cpu is defined %}
  Cpu: {{ container.cpu | int }}
{%- endif %}

{%- if container.needs_ports %}
{# blankline #}
  PortMappings:
  {%- for port, protocol in container.port_mapping.items() %}
    - Protocol: {{ protocol | string | upper }}
      ContainerPort: {{ port }}
  {%- endfor %}
{%- endif %}

{%- if container.mount_points is defined %}
{# blankline #}
  MountPoints:
  {%- for mount_point in container.mount_points %}
    - ContainerPath: {{ mount_point.containerPath }}
      SourceVolume: {{ mount_point.sourceVolume }}
      ReadOnly: {{ mount_point.readOnly|default(True) }}{# by default MountPoints are R/O #}
  {%- endfor %}
{%- endif %}

{%- if container.logs == "awslogs" %}
{# blankline #}
  LogConfiguration:
      LogDriver: awslogs
      Options:
          awslogs-group: {{ service.log_group_name }}
          awslogs-region: !Ref AWS::Region
        {%- if container.log_stream_prefix %}
          awslogs-stream-prefix: {{ container.log_stream_prefix }}
        {%- elif service.log_stream_prefix %}
          awslogs-stream-prefix: {{ service.log_stream_prefix }}
        {%- endif %}

{%- elif container.logs == "fluentd" %}
{# blankline #}
  LogConfiguration:
      LogDriver: fluentd
      Options:
          fluentd-address: {{ global.default_fluentd_address }}
          tag: "docker-container.{{ global.label }}.{{ '{{ .ID }}'  }}"

        {%- if container.log_options is mapping %}{% for key, value in container.log_options.items() %}
          {{ key }}: "{{ value }}"
        {%- endfor %}{% endif %}

{%- else %}
{# blankline #}
  LogConfiguration:
      LogDriver: {{ container.logs }}
    {%- if container.log_options is mapping %}
      Options:
        {%- for key, value in container.log_options.items() %}
          {{ key }}: "{{ value }}"
        {%- endfor %}
    {%- endif %}
{%- endif %}

{%- if container.environment is mapping %}
{# blankline #}
  Environment:
  {%- for k, v in container.environment.items() %}
    {# blankline #}
    - Name: {{ k }}
    {#-
        Deal with Map/List data Types
    #}
    {%- if v is mapping %}
     {#- This feels brittle, https://arcpublishing.atlassian.net/browse/ST-1240 #}
     {%- set vl = v.keys() | list %}
     {%- if vl is iterable and vl|length > 0 and ("Fn::" == vl[0][0:4] or "Ref" == vl[0]) %}
      {#- Map is a translated !Fn object #}
      Value: {{ v | tojson }}
     {%- else %}
      {#- Convert from map to json string, wrap in singleQuotes #}
      Value: '{{ v | tojson }}'
     {%- endif %}
    {%- elif v is sequence and v is not string %}
      {#- Convert from list to json string, wrap in singleQuotes #}
      Value: '{{ v | tojson }}'
    {#-
        Deal with non-string types
    #}
    {%- elif v is number or v is sameas true or v is sameas false %}
      {#- Item is Number or Boolean #}
      Value: '{{ v }}'
    {%- elif v is not string %}
      {#- Unknown datatype, to not tamper #}
      Value: {{ v }}
    {#-
        Process AWS CFN Specials
    #}
    {%- elif v[0] == '{' and 'resolve:' in v %}
      {#- Inline CFN Dynamic Reference, wrap in single quotes #}
      {#- https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html #}
      Value: '{{ v }}'
    {%- elif v[0] in '[{!' %}
      {#- No Quotes for values which look like CFN/JSON #}
      Value: {{ v }}
    {%- elif '${AWS:' in v %}
      {#- if ${AWS: in string then add CFN !Sub to allow inline substitutions #}
      Value: !Sub '{{ v }}'
    {#-
        Process items with quotes
    #}
    {%- elif '"' in v or "'" in v %}
      {#- No quotes for objects containing quotes #}
      Value: {{ v }}
    {#-
        All others are singleQuoted
    #}
    {%- else %}
      {#- Otherwise wrap in single quotes #}
      Value: '{{ v }}'
    {%- endif %}
  {%- endfor %}
{%- endif %}

{%- if container.secrets is mapping %}
{# blankline #}
  Secrets:
  {%- for env_key, env_var in container.secrets.items() %}
    - Name: {{ env_key }}
      ValueFrom: "{{ env_var }}"
  {%- endfor %}
{%- endif %}

{%- if container.container_properties is mapping %}{% for key, value in container.container_properties.items() %}
{# blankline #}
  {{ key }}: {{ value }}
{%- endfor %}{% endif %}

{%- endmacro %}

{%- macro generate_policy_document(policies) %}
  PolicyDocument:
      Version: '2012-10-17'
      Statement:
  {#-
      We always need at least one statement, so easier to include a simple one than perform complex validation
  #}
        - Effect: 'Allow'
          Action: 'STS:GetCallerIdentity'
          Resource: '*'

      {%- for policy in policies %}
        - Effect: {{ policy.effect }}

        {%- if policy.sid is defined %}
          Sid: {{ policy.sid }}
        {%- endif %}

        {%- if policy.actions %}
          Action:
            {%- for action in policy.actions %}
            - "{{ action }}"
            {%- endfor %}
        {%- endif %}

        {%- if policy.not_actions %}
          NotAction:
            {%- for not_action in policy.not_actions %}
            - "{{ not_action }}"
            {%- endfor %}
        {%- endif %}

        {#- For resource and not_resource, we need to check for '*' so that we surround it in quotes
           but anything else should NOT be surrounded by quotes, so that !Sub is possible #}
        {%- if policy.resources %}
          Resource:
            {%- for resource in policy.resources %}
              {%- if '*' == resource %}
                - "{{ resource }}"
              {%- else %}
                - {{ resource }}
              {%- endif %}
            {%- endfor %}
        {%- endif %}

        {%- if policy.not_resources %}
          NotResource:
            {%- for not_resource in policy.not_resources %}
              {%- if '*' == not_resource %}
                - "{{ not_resource }}"
              {%- else %}
                - {{ not_resource }}
              {%- endif %}
            {%- endfor %}
        {%- endif %}

        {%- if policy.principals %}
          Principal:
            {%- for key, value in policy.principals.items() %}
              {{ key }}: {{ value }}
            {%- endfor %}
        {%- endif %}

        {%- if policy.not_principals %}
          NotPrincipal:
            {%- for key, value in policy.not_principals.items() %}
              {{ key }}: {{ value }}
            {%- endfor %}
        {%- endif %}

        {%- if policy.conditions %}
          Condition:
            {%- for key, value in policy.conditions.items() %}
              {{ key }}: {{ value }}
            {%- endfor %}
        {%- endif %}
  {%- endfor %}
{%- endmacro %}
{#-
    Define Macro for generating volume configs
-#}
{%- macro generate_volume_config(volume) %}
    - Name: {{ volume.name }}
    {%- if 'host' in volume %}
      Host:
          SourcePath: {{ volume.host.source_path }}
    {%- endif %}
    {%- if 'DockerVolumeConfiguration' in volume %}
      DockerVolumeConfiguration: {{ volume.DockerVolumeConfiguration }}
    {%- endif %}
    {%- if 'EFSVolumeConfiguration' in volume %}
      EFSVolumeConfiguration: {{ volume.EFSVolumeConfiguration }}
    {%- endif %}
{%- endmacro %}
{{- dump_debug_object("Generated Global Vars", global) }}


{#-
      Set defaults and flags for containers
-#}

{{- update_container_config(container, service.image if service.image is defined else container.name) }}

{%- if other_containers is not defined %}{% set other_containers = [] %}{% endif %}
{% for o_container in other_containers %}
  {{- update_container_config(o_container, o_container.name) }}
{% endfor %}


Description: |
    {{ description | default(default_description) }}

Metadata:
  {%- for k,v in global.cfn_metadata.items() %}
    {{ k }}: {{ v | string }}
    {# blankline #}
  {%- endfor %}

Parameters:
  {%- for k,v in global.cfn_parameters.items() %}
    {{ k }}: {{ v | string }}
    {# blankline #}
  {%- endfor %}

    ClusterName:
        Description: the name of the cluster to host the service (should be something like 'trident-prod' not 'trident-prod-cluster')
        Type: String
        Default: "{{ global.cluster_name }}"

{#- Insert ImageVersion params for reference where needed #}

{%- if container.image_version is defined %}
{# blankline #}
    ImageVersion{{ container.name|v1_alphanumerize }}:
        Description: Version to deploy
      {%- if container.image_version[0] == '/' %}
        Type: AWS::SSM::Parameter::Value<String>
      {%- else %}
        Type: String
      {%- endif %}
        Default: {{ container.image_version }}
{%- endif %}

{%- for o_container in other_containers %}
  {%- if o_container.image_version is defined %}
{# blankline #}
    ImageVersion{{ o_container.name|v1_alphanumerize }}:
        Description: Version to deploy
      {%- if o_container.image_version[0] == '/' %}
        Type: AWS::SSM::Parameter::Value<String>
      {%- else %}
        Type: String
      {%- endif %}
        Default: {{ o_container.image_version }}
  {%- endif %}
{% endfor %}


{%- if global.v1_cluster %}
{#- If not a V2 Cluster, create dummy references if not explicitly supplied #}
{# blankline #}
    ClusterRole:
        Type: String
        Default: {{ v1_ClusterRole | default("v1") }}

    ClusterRoleArn:
        Type: String
        Default: {{ v1_ClusterRoleArn | default("v1") }}

    ClusterHostSecurityGroup:
        Type: String
        Default: {{ v1_ClusterHostSecurityGroup | default("v1") }}

    ClusterServiceAutoScalingRole:
        Type: String
        Default: {{ v1_ClusterServiceAutoScalingRole | default("v1") }}

    ClusterServiceAutoScalingRoleARN:
        Type: String
        Default: {{ v1_ClusterServiceAutoScalingRoleARN | default("v1") }}

    ClusterServiceDnsApex:
        Type: String
        Default: {{ v1_ClusterServiceDnsApex | default("v1") }}

    ClusterServiceDnsSuffix:
        Type: String
        Default: {{ v1_ClusterServiceDnsSuffix | default("v1") }}

    ClusterServiceCertificate:
        Type: String
        Default: {{ v1_ClusterServiceCertificate | default("v1") }}

    ClusterServiceDiscoveryNS:
        Type: String
        Default: {{ v1_ClusterServiceDiscoveryNS | default("v1") }}
{# blankline #}

{%- else %}

{# blankline #}
    {#- Otherwise a V2 Cluster, so fetch the SSM based params #}
    ClusterRole:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/Role

    ClusterRoleArn:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/RoleARN

    ClusterHostSecurityGroup:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/HostSecurityGroup

    ClusterServiceAutoScalingRole:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/ServiceAutoScalingRole

    ClusterServiceAutoScalingRoleARN:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/ServiceAutoScalingRoleARN

    ClusterServiceDnsApex:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/DnsApex

    ClusterServiceDnsSuffix:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/DnsSuffix

    ClusterServiceCertificate:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/Certificate

  {%- if global.uses_cluster_service_discovery %}
    ClusterServiceDiscoveryNS:
        Type: 'AWS::SSM::Parameter::Value<String>'
        Default: /cluster/ecs/{{ global.cluster_name }}/ServiceDiscoveryNS
{# blankline #}
  {%- endif %}

{# blankline #}
{%- endif %}

Conditions:
  {%- for k,v in global.cfn_conditions.items() %}
    {{ k }}: {{ v | string }}
    {# blankline #}
  {%- endfor %}

    cluster_name_valid: !Equals [ !Ref ClusterName, {{ global.cluster_name }} ]
    cluster_name_invalid: !Not [ !Condition cluster_name_valid ]
    never: !Equals [ true, false ]


Rules:
  {%- for k,v in global.cfn_rules.items() %}
    {{ k }}: {{ v | string }}
    {# blankline #}
  {%- endfor %}
    ClusterNameValid:
        Assertions:
          - Assert: !Not [ !Equals [ !Ref ClusterName, '' ] ]


Mappings:
  {%- for k,v in global.cfn_mappings.items() %}
    {{ k }}: {{ v | string }}
    {# blankline #}
  {%- endfor %}

    {#- ShortCodes are 5 characters based on origin's standard #}
    RegionShortCodes:
        'us-east-1':          { 'Code': 'use1' }
        'eu-central-1':       { 'Code': 'euc1' }
        'ap-northeast-1':     { 'Code': 'apne1' }
        'ap-southeast-1':     { 'Code': 'apse1' }


{%- if global.cfn_transform %}
{# blankline #}
Transform: {{ global.cfn_transform }}
{# blankline #}
{%- endif %}

Resources:
  {%- for k,v in global.cfn_resources.items() %}
    {{ k }}: {{ v | string }}
    {# blankline #}
  {%- endfor %}

    ClusterNameInvalid:
        Condition: cluster_name_invalid
        Type: Custom::Failure

{%- for router in routers %}
  {%- if router.create_load_balancer %}
    {#- START OF SERVICE_CREATED LOAD BALANCER, LISTENER and TARGET_GROUP #}

    LoadBalancer{{ router.alias }}:
      {%- if router.allow_destroy %}
        {{ allow_destroy() }}
      {%- endif %}
      {%- if router.xlb_type != "network" %}
        DependsOn:
          - LoadBalancerSecurityGroup{{ router.alias }}
      {%- endif %}
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          {%- if not router.dynamic_name %}
            Name: !Ref AWS::StackName
          {%- endif %}
            Type: {{ router.xlb_type }}
          {%- if router.xlb_type != "network" %}
            SecurityGroups:
              - !Ref LoadBalancerSecurityGroup{{ router.alias }}
          {%- endif %}
            Scheme: {{ router.scheme }}
            Subnets: !Split
              - ","
              - {{ router.subnets }}

    {%- if router.xlb_type == "network" %}

    LoadBalancerSecurityGroup{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp
        Properties:
            Description: When using NLB we do not have to create a security group for the LB itself

    ECSHostSecurityGroupIngress{{ router.alias }}:
        {{ allow_destroy() }}
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Allow NLB to reach ECS for {{ global.label }}/{{ router.alias }}
            GroupId: !Sub "${ClusterHostSecurityGroup}"
            CidrIp: {{ router.cidr_mask }}
            IpProtocol: tcp
            FromPort: 32768
            ToPort: 65535
    {%- else %}{# if NOT router.xlb_type == "network" #}

    LoadBalancerSecurityGroup{{ router.alias }}:
        {{ allow_destroy() }}
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: {{ global.vpc_import }}
            GroupDescription: Access to the load balancer that sits in front of ECS
            SecurityGroupIngress:
              - CidrIp: {{ router.cidr_mask }}
                IpProtocol: tcp
                FromPort: {{ router.public_port }}
                ToPort: {{ router.public_port }}
            {%- if router.http_to_https_redirect %}
              - CidrIp: {{ router.cidr_mask }}
                IpProtocol: tcp
                FromPort: 80
                ToPort: 80
            {%- endif %}

    ECSHostSecurityGroupIngress{{ router.alias }}:
        {{ allow_destroy() }}
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
            Description: Allow ALB to reach ECS for {{ global.label }}/{{ router.alias }}
            SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup{{ router.alias }}
            IpProtocol: tcp
            FromPort: 32768
            ToPort: 65535
            GroupId: !Sub "${ClusterHostSecurityGroup}"
    {%- endif %}

    LoadBalancerListener{{ router.alias }}:
        {{ allow_destroy() }}
        Type: AWS::ElasticLoadBalancingV2::Listener
        DependsOn:
          - LoadBalancer{{ router.alias }}
          - DefaultTargetGroup{{ router.alias }}
        Properties:
            LoadBalancerArn: !Ref LoadBalancer{{ router.alias }}
            Port: {{ router.public_port }}
            Protocol: {{ router.public_protocol | upper }}
          {%- if router.certificate is defined %}
            Certificates:
              - CertificateArn: {{ router.certificate }}
            SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
          {%- endif %}
            DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref DefaultTargetGroup{{ router.alias }}

    {%- if router.http_to_https_redirect %}

    LoadBalancerListener{{ router.alias }}Redirect:
        {{ allow_destroy() }}
        Type: AWS::ElasticLoadBalancingV2::Listener
        DependsOn:
          - LoadBalancer{{ router.alias }}
          - DefaultTargetGroup{{ router.alias }}
        Properties:
            LoadBalancerArn: !Ref LoadBalancer{{ router.alias }}
            Port: 80
            Protocol: HTTP
            DefaultActions:
              - Type: redirect
                RedirectConfig:
                    Host: "#{host}"
                    Path: "/#{path}"
                    Port: "443"
                    Protocol: "HTTPS"
                    Query: "#{query}"
                    StatusCode: HTTP_301
    {%- endif %}

    DefaultTargetGroup{{ router.alias }}:
        {{ allow_destroy() }}
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          {%- if router.target_group_name is defined %}
            Name: {{ router.target_group_name }}
          {%- endif %}

            VpcId: {{ global.vpc_import }}
            Port: {{ router.container_port }}
            Protocol: {{ router.container_protocol | upper }}

          {%- if router.perform_health_check %}
            HealthCheckPath: {{ router.health_check.path }}
            Matcher: {{ router.health_check.matcher }}
            HealthCheckIntervalSeconds: {{ router.health_check.interval_seconds }}
            HealthyThresholdCount: {{ router.health_check.healthy_threshold_count }}
            UnhealthyThresholdCount: {{ router.health_check.unhealthy_threshold_count }}
            HealthCheckTimeoutSeconds: {{ router.health_check.timeout_seconds }}
            HealthCheckProtocol: {{ router.health_check.protocol }}
            HealthCheckPort: {{ router.health_check.port }}
          {%- endif %}

          {%- if router.target_group_attributes is mapping %}
            TargetGroupAttributes:
            {%- for attr_key, attr_var in router.target_group_attributes.items() %}
              - Key: {{ attr_key }}
                Value: {{ attr_var }}
            {%- endfor %}
          {%- endif %}

    {#- START OF SERVICE_CREATED LOAD BALANCER, LISTENER and TARGET_GROUP #}

  {%- elif router.create_target_group %}
    {#- We need to create target group and attach as a listener rule #}

    TargetGroup{{ router.alias }}:
        {{ allow_destroy() }}
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          {%- if router.target_group_name is defined %}
            Name: {{ router.target_group_name }}
          {%- endif %}

            VpcId: {{ global.vpc_import }}
            Port: {{ router.container_port }}
            Protocol: {{ router.container_protocol | upper }}

          {%- if router.perform_health_check %}
            HealthCheckPath: {{ router.health_check.path }}
            Matcher: {{ router.health_check.matcher }}
            HealthCheckIntervalSeconds: {{ router.health_check.interval_seconds }}
            HealthyThresholdCount: {{ router.health_check.healthy_threshold_count }}
            UnhealthyThresholdCount: {{ router.health_check.unhealthy_threshold_count }}
            HealthCheckTimeoutSeconds: {{ router.health_check.timeout_seconds }}
            HealthCheckProtocol: {{ router.health_check.protocol }}
            HealthCheckPort: {{ router.health_check.port }}
          {%- endif %}

          {%- if router.target_group_attributes is mapping %}
            TargetGroupAttributes:
            {%- for attr_key, attr_var in router.target_group_attributes.items() %}
              - Key: {{ attr_key }}
                Value: {{ attr_var }}
            {%- endfor %}
          {%- endif %}

    ListenerRule{{ router.alias }}:
        {{ allow_destroy() }}
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - Type: forward
                  TargetGroupArn: !Ref TargetGroup{{ router.alias }}
            Conditions:
              {%- if router.rules is defined %}
              {%- if router.rules.domain is defined%}
                - Field: host-header
                  Values:
                    - "{{ router.rules.domain }}"
              {%- elif router.rules.path_pattern is defined %}
                - Field: path-pattern
                  Values:
                    - "{{ router.rules.path_pattern }}"
              {%- endif %}
              {%- else %}
                - Field: host-header
                  Values:
                    - "*"
              {%- endif %}
            ListenerArn: !ImportValue {{ router.import_listener }}
            Priority: {{ router.priority }}

    {#- END OF SERVICE_CREATED TARGET GROUP, LB and Listener were created elsewhere #}

  {%- elif router.destroy %}

    ECSHostSecurityGroupIngress{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

    LoadBalancer{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

    LoadBalancerSecurityGroup{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

    LoadBalancerListener{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

    ListenerRule{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

    TargetGroup{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

    DefaultTargetGroup{{ router.alias }}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

  {%- endif %}
{%- endfor %}

{%- for registry in registries %}
    DiscoveryService{{ registry.alias }}:
        {{ allow_destroy() }}
    {%- if not registry.enabled %}
        Condition: never
        Type: Custom::NoOp
    {%- else %}
        Type: AWS::ServiceDiscovery::Service
        Properties:
            Name: {{ registry.service_name }}
            NamespaceId: {{ registry.service_discovery_ns }}

            DnsConfig:
                RoutingPolicy: {{ registry.routing_policy }}
                DnsRecords:
                {%- for type in registry.types %}
                  - TTL: {{ registry.ttl }}
                    Type: {{ type | upper }}
                {%- endfor %}
    {%- endif %}

  {%- if 'publishARN_asSSM' in registry %}

    Discovery{{ registry.alias }}ARNasSSM:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: {{ registry['publishARN_asSSM'] }}
            Type: String
            Value: !GetAtt DiscoveryService{{ registry.alias }}.Arn
  {%- endif %}

  {%- if 'publishNAME_asSSM' in registry %}

    Discovery{{ registry.alias }}NAMEasSSM:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: {{ registry['publishNAME_asSSM'] }}
            Type: String
            Value: !GetAtt DiscoveryService{{ registry.alias }}.Name
  {%- endif %}
  {%- if 'publishID_asSSM' in registry %}

    Discovery{{ registry.alias }}IDasSSM:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: {{ registry['publishID_asSSM'] }}
            Type: String
            Value: !GetAtt DiscoveryService{{ registry.alias }}.Id
  {%- endif %}


{%- endfor %}

{%- if service.create_task_role %}
{# blankline #}
    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Principal:
                        Service:
                          - ecs-tasks.amazonaws.com

            Policies:
            - PolicyName: !Sub {{service.task_policy_name}}-${AWS::Region}
              {{- generate_policy_document(service.task_role.policies) | indent(12, True) }}
{%- endif %}


{%- if service.create_execution_role %}
{# blankline #}
    ExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
            AssumeRolePolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - sts:AssumeRole
                    Principal:
                        Service:
                          - ecs-tasks.amazonaws.com

            Policies:
            - PolicyName: !Sub {{service.execution_policy_name}}-${AWS::Region}
              {{- generate_policy_document(service.execution_role.policies) | indent(12, True) }}
{%- endif %}

{%- for router in routers %}
  {%- if router.dns is defined %}

    DNSRecord{{router.alias}}:
        {{ allow_destroy() }}
        Type: AWS::Route53::RecordSetGroup
        Properties:
            HostedZoneName: !Join [ "", [ {{ router.dns.zone_apex }}, "." ] ]
            RecordSets:
                - Name: {{ router.dns.domain }}
                  Type: A
                  AliasTarget:
                      HostedZoneId: {{ router.target_dns_zoneid }}
                      DNSName: {{ router.target_dns_alias }}
                  {%- if router.dns.properties is mapping %}{% for key, value in router.dns.properties.items() %}
                  {{ key }}: {{ value }}
                  {%- endfor %}{% endif %}


    {%- if router.ssm is defined and router.ssm.target is defined %}
    SSMDnsAlias{{router.alias}}:
        {{ allow_destroy() }}
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: "{{router.ssm.target}}"
            Type: String
      {%- if router.ssm.element|default(None) == "dns_url_port" %}
            Value: !Join
              - ''
              - - '{{router.public_protocol|lower}}'
                - '://'
                - {{router.dns.domain}}
                - ':'
                - '{{router.public_port|string}}'

      {%- elif router.ssm.element|default(None) == "lb_url_port" %}
            Value: !Join
              - ''
              - - '{{router.public_protocol|lower}}'
                - '://'
                - {{router.target_dns_alias}}
                - ':'
                - '{{router.public_port|string}}'

      {%- elif router.ssm.element|default(None) == "dns_url" %}
            Value: !Join
              - ''
              - - '{{router.public_protocol|lower}}'
                - '://'
                - {{router.dns.domain}}

      {%- elif router.ssm.element|default(None) == "lb_url" %}
            Value: !Join
              - ''
              - - '{{router.public_protocol|lower}}'
                - '://'
                - {{router.target_dns_alias}}

      {%- elif router.ssm.element|default(None) == "dns_host_port" %}
            Value: !Join
              - ''
              - - {{router.dns.domain}}
                - ':'
                - '{{router.public_port|string}}'

      {%- elif router.ssm.element|default(None) == "lb_host_port" %}
            Value: !Join
              - ''
              - - {{router.target_dns_alias}}
                - ':'
                - '{{router.public_port|string}}'

      {%- elif router.ssm.element|default(None) == "lb_host" %}
            Value: {{router.target_dns_alias}}

      {%- elif router.ssm.element|default(None) == "dns_host" %}
            Value: {{router.dns.domain}}

      {%- endif %}

    {%- endif %}

  {%- elif router.destroy %}
    DNSRecord{{router.alias}}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

    SSMDnsAlias{{router.alias}}:
        {{ allow_destroy() }}
        Condition: never
        Type: Custom::NoOp

  {%- endif %}
{%- endfor %}

{# Begin Autoscaling #}

{% if not global.scaling.disable %}
    ScalableTarget:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        Properties:
            MaxCapacity: {{ global.scaling.max }}
            MinCapacity: {{ global.scaling.min }}
            RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
            ServiceNamespace: ecs
            ScalableDimension: ecs:service:DesiredCount
            ResourceId: !Join ['/', [ "service", "{{ global.cluster_name }}", !GetAtt Service.Name ]]

    {% if global.scaling.enable_scaling_cpu %}
    TargetTrackingScalingPolicyDefaultCPU:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: cpu-target-tracking-scaling-policy
            PolicyType: TargetTrackingScaling
            ScalingTargetId: !Ref ScalableTarget
            TargetTrackingScalingPolicyConfiguration:
                TargetValue: {{ global.scaling.cpu_target }}
                ScaleInCooldown: {{ global.scaling.scale_in_cooldown }}
                ScaleOutCooldown: {{ global.scaling.scale_out_cooldown }}
                PredefinedMetricSpecification:
                    PredefinedMetricType: ECSServiceAverageCPUUtilization
    {% endif %}
    {% if global.scaling.enable_scaling_mem %}
    TargetTrackingScalingPolicyDefaultMem:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: mem-target-tracking-scaling-policy
            PolicyType: TargetTrackingScaling
            ScalingTargetId: !Ref ScalableTarget
            TargetTrackingScalingPolicyConfiguration:
                TargetValue: {{ global.scaling.mem_target }}
                ScaleInCooldown: {{ global.scaling.scale_in_cooldown }}
                ScaleOutCooldown: {{ global.scaling.scale_out_cooldown }}
                PredefinedMetricSpecification:
                    PredefinedMetricType: ECSServiceAverageMemoryUtilization
    {% endif %}

{% endif %}

{% for router in routers %}
  {{- dump_debug_object("Router Object", router) }}

  {% if not router.scaling.disable %}

    StepScalingRouterLatencyHigh:
        Type: AWS::ApplicationAutoScaling::ScalingPolicy
        Properties:
            PolicyName: latency-{{router.alias}}-tracking-scaling-policy
            PolicyType: TargetTrackingScaling
            ScalingTargetId: !Ref ScalableTarget
            TargetTrackingScalingPolicyConfiguration:
                TargetValue: {{ router.scaling.latency_target }}
                ScaleInCooldown: {{ router.scaling.scale_in_cooldown }}
                ScaleOutCooldown: {{ router.scaling.scale_out_cooldown }}
                CustomizedMetricSpecification:
                    Dimensions:
                        -   Name: TargetGroup
                            Value: !GetAtt {% if router.import_listener is not defined %}Default{% endif %}TargetGroup{{ router.alias }}.TargetGroupFullName
                        -   Name: LoadBalancer
                            Value: !GetAtt LoadBalancer{{ router.alias }}.LoadBalancerFullName
                    MetricName: TargetResponseTime
                    Namespace: AWS/ApplicationELB
                    Statistic: {{ router.scaling.statistic }}

  {% endif %}
{% endfor %}


{# End Autoscaling #}

    Service:
        Type: AWS::ECS::Service
        DependsOn:
          - TaskDefinition
        {%- for router in routers %}{%- if router.depends_on is defined %}
          - {{ router.depends_on }}
        {%- endif %}{%- endfor %}

        Properties:
            Cluster: "{{ global.cluster_name }}"
            TaskDefinition: !Ref TaskDefinition
            SchedulingStrategy: {{ service.strategy }}
          {%- if service.strategy == "REPLICA"  %}
            DesiredCount: {{ service.default_scale }}
          {%- endif %}

          {%- if service.service_name is defined %}
            ServiceName: {{ service.service_name }}
          {%- endif %}

          {%- if global.uses_load_balancer %}
            LoadBalancers:
            {%- for router in routers %}{%- if router.uses_load_balancer %}
              - TargetGroupArn: {{ router.target_group_arn }}
                ContainerName: "{{ router.container_name }}"
                ContainerPort: {{ router.container_port }}
            {%- endif %}{%- endfor %}
          {%- endif %}

          {%- if global.uses_service_registry %}
            ServiceRegistries:
            {% for registry in registries %}{% if registry.enable_registration %}
              - RegistryArn: !GetAtt DiscoveryService{{ registry.alias | v1_alphanumerize }}.Arn
                ContainerName: "{{ registry.container_name }}"
                ContainerPort: {{ registry.container_port }}
            {%- endif %}{%- endfor %}
          {%- endif %}

          {%- if service.service_properties is mapping %}{% for key, value in service.service_properties.items() %}
            {{ key }}: {{ value }}
          {%- endfor %}{% endif %}

          {%- if service.placementStrategies is defined %}
            PlacementStrategies:
            {%- for strategy in service.placementStrategies %}
              - Type: {{ strategy.type }}
                Field: {{ strategy.field }}
            {%- endfor %}
          {%- endif %}

          {%- if service.placementConstraints is defined %}
            PlacementConstraints:
            {%- for constraint in service.placementConstraints %}
              - Type: {{ constraint.type }}
              {%- if constraint.expression is defined %}
                Expression: {{ constraint.expression }}
              {%- endif %}
            {%- endfor %}
          {%- endif %}

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
      {%- if service.UpdateReplacePolicy is defined %}
        UpdateReplacePolicy: {{ service.UpdateReplacePolicy }}
      {%- endif %}
        Properties:
            Family: {{ service.task_family }}
          {%- if service.task_role_arn is defined %}
            TaskRoleArn: {{ service.task_role_arn }}
          {%- endif %}

          {%- if service.execution_role_arn is defined %}
            ExecutionRoleArn: {{ service.execution_role_arn }}
          {%- endif %}

          {%- if service.network_mode is defined %}
            NetworkMode: {{  service.network_mode }}
          {%- endif %}

          {%- if service.task_properties is mapping %}{%- for key, value in service.task_properties.items() %}
            {{ key }}: {{ value }}
          {%- endfor %}{% endif %}

          {%- if container.volumes is defined or volumes is defined %}
            Volumes:
            {%- for volume in container.volumes | default([]) %}
              {{ generate_volume_config(volume) | indent(14, False) }}
            {%- endfor %}

            {%- for volume in volumes | default([]) %}
              {{ generate_volume_config(volume) | indent(14, False) }}
            {%- endfor %}
          {%- endif %}

            ContainerDefinitions:
              {{ generate_container_config(container, service) | indent(14, False) }}
            {%- if other_containers is defined %}{%- for o_container in other_containers %}
              {{ generate_container_config(o_container, service) | indent(14, False) }}
            {%- endfor %}{%- endif %}

  {%- if service.create_log_group %}
    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: {{ service.log_group_name }}
            RetentionInDays: {{ service.log_retention }}
  {%- endif %}

{%- if global.enable_ssm_export %}

    {%- for router in routers %}
    {%- if router.create_load_balancer %}
    {# blankline #}
    ExportServiceUrl{{router.alias}}:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: /services/{{ global.label }}/exports/{{ router.alias }}/endpoint
            Type: String
            Value: !GetAtt LoadBalancer{{router.alias}}.DNSName

    ExportLoadBalancerArn{{router.alias}}:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: /services/{{ global.label }}/exports/{{ router.alias }}/lbarn
            Type: String
            Value: !Ref LoadBalancer{{router.alias}}

    ExportLoadBalancerCanonicalHostedZoneId{{router.alias}}:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: /services/{{ global.label }}/exports/{{ router.alias }}/canonicalhostedzoneid
            Type: String
            Value: !GetAtt LoadBalancer{{router.alias}}.CanonicalHostedZoneID

    ExportLoadBalancerListenerArn{{router.alias}}:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: /services/{{ global.label }}/exports/{{ router.alias }}/listenerarn
            Type: String
            Value: !Ref LoadBalancerListener{{router.alias}}

    ExportDefaultTargetGroupArn{{router.alias}}:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: /services/{{ global.label }}/exports/{{ router.alias }}/tgarn
            Type: String
            Value: !Ref DefaultTargetGroup{{router.alias}}

    {%- elif router.create_target_group %}
    ExportTargetGroupArn{{ router.alias }}:
        Type: "AWS::SSM::Parameter"
        Properties:
            Name: /services/{{ global.label }}/exports/{{ router.alias }}/tgarn
            Type: String
            Value: !Ref TargetGroup
    {%- endif %}
    {%- endfor %}

{%- endif %}

Outputs:
{%- for k,v in global.cfn_outputs.items() %}
    {{ k }}: {{ v | string }}
    {# blankline #}
{%- endfor %}

    Dummy:
        Description: Placeholder if no other outputs defined
        Value: None

{%- for router in routers %}
  {%- if router.create_load_balancer %}
    {# blankline #}
    ServiceUrl{{router.alias}}:
        Description: The URL endpoint for the service
        Value: !GetAtt LoadBalancer{{router.alias}}.DNSName
        Export:
            Name: service-{{ global.label }}-endpoint{{ router.alias }}

    LoadBalancerArn{{router.alias}}:
        Value: !Ref LoadBalancer{{router.alias}}
        Export:
            Name: service-{{ global.label }}-lbarn{{ router.alias }}


    LoadBalancerCanonicalHostedZoneId{{router.alias}}:
        Value: !GetAtt LoadBalancer{{router.alias}}.CanonicalHostedZoneID
        Export:
            Name: service-{{ global.label }}-canonicalhostedzoneid{{ router.alias }}

    LoadBalancerListenerArn{{router.alias}}:
        Value: !Ref LoadBalancerListener{{router.alias}}
        Export:
            Name: service-{{ global.label }}-listenerarn{{ router.alias }}

    DefaultTargetGroupArn{{router.alias}}:
        Value: !Ref DefaultTargetGroup{{router.alias}}
        Export:
            Name: service-{{ global.label }}-tgarn{{ router.alias }}

  {%- elif router.create_target_group %}
    TargetGroupArn{{ router.alias }}:
        Value: !Ref TargetGroup{{router.alias}}
        Export:
            Name: service-{{ global.label }}-tgarn{{ router.alias }}
  {%- endif %}

{%- endfor %}
{# blankline #}