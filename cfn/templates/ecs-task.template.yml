# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
# This is a custom template with some components derived from proper StackJack templates
# This template is not sufficiently modular to copy/paste into another project but could
# be used as a guide for creating scheduled ECS tasks
---
AWSTemplateFormatVersion: 2010-09-09

Description: CloudFormation template for an ECS task definition

Resources:

  # mostly a replica of the main app task definitions
  # this task will run rake check:all to check all watched pages
  KlaxonPageCheckTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Family: {{ family }}
      Cpu: 256
      Memory: 512
      NetworkMode: bridge
      ExecutionRoleArn: !GetAtt TaskDefintionExecutionRole.Arn
      ContainerDefinitions:
        - Name: {{ container_name }}
          Image: !Sub "{{ image }}"
          Essential: True
          MemoryReservation: 512
          PortMappings:
            - Protocol: TCP
              ContainerPort: 3001
          LogConfiguration:
              LogDriver: awslogs
              Options:
                  awslogs-group: /service/klaxon/dev
                  awslogs-region: !Ref AWS::Region
                  awslogs-stream-prefix: rake-page-check-dev
          ExtraHosts: [{'Hostname': 'statsd', 'IpAddress': '172.17.0.1'}]
        # This jinja block covers mapping over environment vars from config
        # copied in from v1/cfn/shared/apps/ecs-v2/service.template.yml stackjack template
        {%- if environment is mapping %}
        {# blankline #}
          Environment:
          {%- for k, v in environment.items() %}
            {# blankline #}
            - Name: {{ k }}
            {#-
                Deal with Map/List data Types
            #}
            {%- if v is mapping %}
            {#- This feels brittle, https://arcpublishing.atlassian.net/browse/ST-1240 #}
            {%- set vl = v.keys() | list %}
            {%- if vl is iterable and vl|length > 0 and ("Fn::" == vl[0][0:4] or "Ref" == vl[0]) %}
              {#- Map is a translated !Fn object #}
              Value: {{ v | tojson }}
            {%- else %}
              {#- Convert from map to json string, wrap in singleQuotes #}
              Value: '{{ v | tojson }}'
            {%- endif %}
            {%- elif v is sequence and v is not string %}
              {#- Convert from list to json string, wrap in singleQuotes #}
              Value: '{{ v | tojson }}'
            {#-
                Deal with non-string types
            #}
            {%- elif v is number or v is sameas true or v is sameas false %}
              {#- Item is Number or Boolean #}
              Value: '{{ v }}'
            {%- elif v is not string %}
              {#- Unknown datatype, to not tamper #}
              Value: {{ v }}
            {#-
                Process AWS CFN Specials
            #}
            {%- elif v[0] == '{' and 'resolve:' in v %}
              {#- Inline CFN Dynamic Reference, wrap in single quotes #}
              {#- https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html #}
              Value: '{{ v }}'
            {%- elif v[0] in '[{!' %}
              {#- No Quotes for values which look like CFN/JSON #}
              Value: {{ v }}
            {%- elif '${AWS:' in v %}
              {#- if ${AWS: in string then add CFN !Sub to allow inline substitutions #}
              Value: !Sub '{{ v }}'
            {#-
                Process items with quotes
            #}
            {%- elif '"' in v or "'" in v %}
              {#- No quotes for objects containing quotes #}
              Value: {{ v }}
            {#-
                All others are singleQuoted
            #}
            {%- else %}
              {#- Otherwise wrap in single quotes #}
              Value: '{{ v }}'
            {%- endif %}
          {%- endfor %}
        {%- endif %}

  # The role KlaxonPageCheckTaskDefinition will assume in order
  # to execute the page checks (mostly needed for accessing secrets)
  # This role was mostly copied from the main app server's task definition role
  TaskDefintionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
      Policies:
      - PolicyName: klaxon-page-check-task-execution-role            
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action: 'STS:GetCallerIdentity'
              Resource: '*'
            - Effect: Allow
              Action:
                - "ssm:GetParameters"
                - "secretsmanager:GetSecretValue"
              Resource:
                - !Sub arn:aws:ssm:*:${AWS::AccountId}:parameter/*
                - !Sub arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*
      
  # The resource that executes KlaxonPageCheckTaskDefinition's task on
  # a schedule (every 10 min)        
  KlaxonTaskSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Klaxon ecs task scheduler
      Name: klaxon-ecs-task-scheduler
      ScheduleExpression: cron({{ schedule_expression }})
      State: ENABLED
      Targets:
        - Arn: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/newsroom-dev" # cluster arn, hardcoding for now
          Id: klaxon-page-check-ecs-task
          RoleArn: !GetAtt EC2ServiceEventsExecutionRole.Arn #ecs events role
          EcsParameters:
            TaskCount: 1
            TaskDefinitionArn: !Ref KlaxonPageCheckTaskDefinition

  # Role that allows KlaxonTaskSchedule to execute KlaxonPageCheckTaskDefinition's task
  EC2ServiceEventsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: A role for event to execute Klaxon ECS task
      RoleName: {{ events_role }}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ecs-tasks.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole
          